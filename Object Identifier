import turtle

# Set up the screen
screen = turtle.Screen()
screen.bgcolor("white")
screen.setup(width=800, height=600)

# Create the turtle
pix_turtle = turtle.Turtle()
pix_turtle.shape("turtle")
pix_turtle.speed(0)  # Fastest drawing speed

# Sample image data (simplified as a color grid)
# Each pixel is represented by a color (for simplicity, we assume it's a small grid)
image_data = [
    [(255, 255, 255), (255, 0, 0), (255, 255, 255), (0, 255, 0)],
    [(255, 0, 0), (255, 0, 0), (255, 255, 255), (0, 255, 0)],
    [(255, 255, 255), (255, 255, 255), (0, 255, 0), (0, 255, 0)],
    [(0, 255, 0), (0, 0, 255), (0, 0, 255), (0, 255, 0)]
]

def draw_pixel(color, size=20):
    """
    Draw a single 'pixel' (square) using the turtle.
    :param color: The color of the pixel
    :param size: The size of the pixel
    """
    pix_turtle.fillcolor(color)
    pix_turtle.begin_fill()
    
    for _ in range(4):
        pix_turtle.forward(size)
        pix_turtle.right(90)
    
    pix_turtle.end_fill()

def detect_objects(image_data):
    """
    Detect objects based on color patterns in the image data.
    :param image_data: 2D list of RGB color tuples.
    :return: List of detected objects based on color.
    """
    detected_objects = {}

    # Define simple color patterns we might recognize
    color_patterns = {
        "Red Object": (255, 0, 0),
        "Green Object": (0, 255, 0),
        "Blue Object": (0, 0, 255)
    }

    for row in image_data:
        for pixel in row:
            # Check if the pixel matches any predefined color pattern
            for label, pattern in color_patterns.items():
                if pixel == pattern:
                    if label not in detected_objects:
                        detected_objects[label] = 0
                    detected_objects[label] += 1

    return detected_objects

def render_image(image_data, pixel_size=20):
    """
    Render the image based on the pixel data using turtle.
    :param image_data: 2D list of RGB color tuples.
    :param pixel_size: The size of each "pixel" (square).
    """
    rows = len(image_data)
    cols = len(image_data[0])

    # Set the initial position for drawing
    pix_turtle.penup()
    pix_turtle.goto(-cols * pixel_size // 2, rows * pixel_size // 2)
    pix_turtle.pendown()

    # Draw the image pixel by pixel
    for y in range(rows):
        for x in range(cols):
            # Get the pixel color (in RGB format)
            r, g, b = image_data[y][x]
            # Convert RGB to a string that turtle understands
            color_str = f"#{r:02x}{g:02x}{b:02x}"

            # Draw the pixel (square)
            draw_pixel(color_str, pixel_size)
            
            # Move to the next position
            pix_turtle.penup()
            pix_turtle.forward(pixel_size)
            pix_turtle.pendown()

        # Move to the next row
        pix_turtle.penup()
        pix_turtle.goto(-cols * pixel_size // 2, rows * pixel_size // 2 - (y + 1) * pixel_size)
        pix_turtle.pendown()

def main():
    # Render the image
    render_image(image_data, pixel_size=30)

    # Detect objects based on color patterns
    detected_objects = detect_objects(image_data)

    # Print detected objects and their counts
    print("Detected objects:")
    for obj, count in detected_objects.items():
        print(f"{obj}: {count} pixels")

    # Hide the turtle after drawing
    pix_turtle.hideturtle()

    # Keep the window open
    screen.mainloop()

# Run the main function
main()
